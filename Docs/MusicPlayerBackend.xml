<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MusicPlayerBackend</name>
    </assembly>
    <members>
        <member name="T:MusicPlayerBackend.Contracts.IApplication">
            <summary>
            Contracts the neccesary functions to communicate with it's subcomponents and vice versa.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IApplication.SetStyle(MusicPlayerBackend.APPLICATION_STYLE)">
            <summary>
            Communicates to the App to set the <paramref name="appStyle"/> predefined in <see cref="T:MusicPlayerBackend.APPLICATION_STYLE"/>.
            </summary>
            <param name="appStyle"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IApplication.GetCurrentApplicationStyle">
            <summary>
            Contracts to fetch the current set style.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMainController">
            <summary>
            Contracts the neccessary functions to connect and handle all sub-controller with the ui.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ICustomDecorationController">
            <summary>
            Contracts the neccessary functions to commmunicate to another controller and ui and connect with interactor.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundControlBarController">
            <summary>
            Contracts neccessary functions to communicate and connect <see cref="T:MusicPlayerBackend.Contracts.ISoundControlBar"/> with <see cref="T:MusicPlayerBackend.Contracts.IAudioFileInteractor"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundControlBarController.UpdateInformation(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Contracts to set audio meta data to the ui.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IContentPresenterController">
            <summary>
            Contracts neccessary functions to communicate and connect ui with interactor.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISettingsController">
            <summary>
            Contracts neccessary functions to communicate and connect ui with interactor.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettingsController.LoadSettings">
            <summary>
            Contracts to load the settings. To the settings ui.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISongCoverController">
            <summary>
            Contract to connect the <see cref="T:MusicPlayerBackend.Contracts.ISongCover"/> with <see cref="T:MusicPlayerBackend.Contracts.ISongCoverInteractor"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISongCoverController.SetCover(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Contracts to load the cover, is delegated to ui.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaListController">
            <summary>
            Contracts to connect <see cref="T:MusicPlayerBackend.Contracts.IMediaList"/> with <see cref="T:MusicPlayerBackend.Contracts.IMediaListInteractor"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaListController.SetMediaList">
            <summary>
            Contracts to load media files into the ui.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaListController.SetMediaListCustomMediaPath(System.String)">
            <summary>
            Contracts to laod media files into ui from new path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IAudioFileInteractor">
            <summary>
            Contracts to connect <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/> with <see cref="T:MusicPlayerBackend.Contracts.IMetaDataReader"/> and with <see cref="T:MusicPlayerBackend.Contracts.IDataConverter"/>.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IAudioFileInteractor.OnUpdatePlayProgress">
            <summary>
            Defines the delegation for an update of any replay progress.
            </summary>
            <param name="current">
            Contains the value of the passed time of the replay.
            </param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IAudioFileInteractor.OnAudioFileFinished">
            <summary>
            Defines the delegation for an notification that a replay has finished on it self.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IAudioFileInteractor.onUpdatePlayProgress">
            <summary>
            Declares the must that an event exists in any implementation of <see cref="T:MusicPlayerBackend.Contracts.IAudioFileInteractor"/>.
            The use of it is not guranteed, but advised.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IAudioFileInteractor.onAudioFileFinished">
            <summary>
            Declares the must that an event exists in any implementation of <see cref="T:MusicPlayerBackend.Contracts.IAudioFileInteractor"/>.
            The use of it is not guranteed, but advised.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IAudioFileInteractor.StartPlaying(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Contracts to play actual audio file.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IAudioFileInteractor.StartPlayingAt(System.TimeSpan)">
            <summary>
            Contracts to start actual audio file at given time.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IAudioFileInteractor.SkipTo(System.Int32)">
            <summary>
            Contracts to Skip to specific time.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IAudioFileInteractor.StopPlaying">
            <summary>
            Contracts to stop playing the actual song.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IAudioFileInteractor.ResumePlaying">
            <summary>
            Contracts to resume playing the actual song.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISettingsInteractor">
            <summary>
            Contracts to connect <see cref="T:MusicPlayerBackend.Contracts.IFileReader"/>, <see cref="T:MusicPlayerBackend.Contracts.IFileWriter"/>, 
            <see cref="T:MusicPlayerBackend.Contracts.IJSONSerializer"/>, <see cref="T:MusicPlayerBackend.Contracts.IJSONDeserializer"/> and <see cref="T:MusicPlayerBackend.Contracts.IDataConverter"/> with each other.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettingsInteractor.WriteSettings(MusicPlayerBackend.AppSettings)">
            <summary>
            Contracts to write <paramref name="appSettings"/> to the settings file.
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettingsInteractor.ReadSettings">
            <summary>
            Contracts to read app settings from the settings file.
            </summary>
            <returns><see cref="T:MusicPlayerBackend.AppSettings"/> saved in settings file.</returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettingsInteractor.GetAudioDevices">
            <summary>
            Contracts to fetch audio devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettingsInteractor.SetAudioDevice(System.String)">
            <summary>
            Contracts to set the audio output device to the sound engine.
            </summary>
            <param name="audiodevice"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaListInteractor">
            <summary>
            Contracts to connect <see cref="T:MusicPlayerBackend.Contracts.IMetaDataReader"/> with <see cref="T:MusicPlayerBackend.Contracts.IFileSystemHandler"/>.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaListInteractor.OnMediaFound">
            <summary>
            To be called with each found media. 
            </summary>
            <param name="audioMetaData"></param>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IMediaListInteractor.onMediaFound">
            <summary>
            <see cref="T:MusicPlayerBackend.Contracts.IMediaListInteractor.OnMediaFound"/>
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaListInteractor.GetMediaListAsync(System.String)">
            <summary>
            Contracts to fetch all audio files recursivly from a root dir.
            </summary>
            <param name="rootPath"></param>
            <returns>List of <see cref="T:MusicPlayerBackend.AudioMetaData"/> from all found media files.</returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISongCoverInteractor">
            <summary>
            Contracts to connect <see cref="T:MusicPlayerBackend.Contracts.IMetaDataReader"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISongCoverInteractor.GetCoverFromAudio(System.String)">
            <summary>
            Contracts to read potential img file from meta data.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IFileSystemHandler">
            <summary>
            Contracts the neccessary functions to handle a file system.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IFileSystemHandler.OnMediaFound">
            <summary>
            To be called with each found media. 
            </summary>
            <param name="mediafile"></param>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IFileSystemHandler.onMediaFound">
            <summary>
            <see cref="T:MusicPlayerBackend.Contracts.IFileSystemHandler.OnMediaFound"/>
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IFileSystemHandler.FindAudioFilesFromRootPath(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Describes the neccessary input and output to fetch audio file paths from a root.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="validAudioFiles">The valid file endings.</param>
            <returns>All valid audio files in a List of paths.</returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IFileSystemHandler.FindAudioFilesFromRootPathAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Describes the neccessary input and output to fetch audio file paths from a root. Calls <see cref="T:MusicPlayerBackend.Contracts.IFileSystemHandler.OnMediaFound"/> for every found media.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="validAudioFiles">The valid file endings.</param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMetaDataReader">
            <summary>
            Contracts the neccessary functions to read a audio meta data struct from files.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMetaDataReader.ReadMetaDataFromFile(System.String)">
            <summary>
            Communicates that <paramref name="path"/> is used to obtain an <see cref="T:MusicPlayerBackend.AudioMetaData"/>.
            </summary>
            <param name="path"></param>
            <returns>Should return an correctly filled <see cref="T:MusicPlayerBackend.AudioMetaData"/> struct.</returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMetaDataReader.ReadImageFromAudioFile(System.String)">
            <summary>
            Contracts to read the cover image from a audi file if available.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundEngine">
            <summary>
            Contracts the neccessary functions and events
            to ensure communication with the specific implementation of an sound handler
            to other components that might want to work with audio file.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundEngine.OnUpdatePlayProgress">
            <summary>
            Defines the delegation for an update of any replay progress.
            </summary>
            <param name="current">
            Contains the value of the passed time of the replay.
            </param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundEngine.OnAudioFileFinished">
            <summary>
            Defines the delegation for an notification that a replay has finished on it self.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISoundEngine.onUpdatePlayProgress">
            <summary>
            Declares the must that an event exists in any implementation of <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/>.
            The use of it is not guranteed, but advised.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISoundEngine.onAudioFileFinished">
            <summary>
            Declares the must that an event exists in any implementation of <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/>.
            The use of it is not guranteed, but advised.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundEngine.SetAudioDevice(System.String)">
            <summary>
            Communicates the <paramref name="device"/> to be used. 
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundEngine.GetAudioDevices">
            <summary>
            Communicates the audio devices an <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/> implementation can find.
            </summary>
            <returns> List of device names.</returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundEngine.GetCurrentAudioDevice">
            <summary>
            Communicates the current set audio device.
            </summary>
            <returns>Name of current device.</returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundEngine.StartPlaying(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Communicates to start playing the given audio file via <paramref name="audioMetaData"/>.
            </summary>
            <param name="audioMetaData"><inheritdoc cref="T:MusicPlayerBackend.AudioMetaData"/></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundEngine.StopPlaying">
            <summary>
            Communicates to stop playing current audio file.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundEngine.ResumePlaying">
            <summary>
            Communicates to resume playing the current audio file.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IDataConverter">
            <summary>
            Contracts the neccessary functions
            to conversio from Models to Structs and vice vers as well as convert any other complex type into another needed.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IJSONSerializer">
            <summary>
            Contracts the neccessary functions to allow serialization of objects.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IJSONSerializer.Serialize``1(``0)">
            <summary>
            Describes the neccessary input and output for serialization.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializable"></param>
            <returns>Should be an representation of the object as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IJSONDeserializer">
            <summary>
            Contracts the neccessary functions to allow deserializing of objects.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IJSONDeserializer.Deserialize``1(System.String)">
            <summary>
            Describes the neccessary input and output for deserialization.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializable"></param>
            <returns>Should be an representation of the string as <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IFileWriter">
            <summary>
            Contracts the neccessary functions to allow writing content to an file.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IFileWriter.Write(System.String,System.String)">
            <summary>
            Describes that <paramref name="text"/> is written to file at <paramref name="path"/>.
            </summary>
            <param name="text"></param>
            <param name="path"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IFileReader">
            <summary>
            Contracts the neccessary functions to allow reading content from an file.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IFileReader.ReadWhole(System.String)">
            <summary>
            Describes the neccessary input and output to read a file as whole.
            </summary>
            <param name="path"></param>
            <returns>Single <see cref="T:System.String"/> containing a file formatted as text.</returns>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IFileReader.ReadAllLines(System.String)">
            <summary>
            Describes the neccessary input and output to read a file line by line.
            </summary>
            <param name="path"></param>
            <returns>List of <see cref="T:System.String"/> each representing one single line of the file.</returns>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMainUI">
            <summary>
            Contracts the neccessary functions to communicate with the main window.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMainUI.OnThemeChange">
            <summary>
            Interfaces to change theme.
            </summary>
            <param name="appStyle"></param>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IMainUI.onThemeChange">
            <summary>
            To be invoked by settings.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Contracts.IMainUI.CustomDecoration">
            <summary>
            Represents a custom subwindow, it replaces the os decoration. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Contracts.IMainUI.SoundControlBar">
            <summary>
            Represents a custom subwindow, enables controll over the playing, pausing and more adjustments. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Contracts.IMainUI.ContentPresenter">
            <summary>
            Represents a custom subwindow, handles the content of settings, medialist and the song cover.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMainUI.Show">
            <summary>
            Contracts to show the window.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundControlBar">
            <summary>
            Contracts the neccessary functions to communicate with the sound controll bar and affect audio directly.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundControlBar.OnPlay">
            <summary>
            No return on play and without parameters.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundControlBar.OnPause">
            <summary>
            No return on pause and without parameters.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundControlBar.OnResume">
            <summary>
            No return and without parameters.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISoundControlBar.OnNext">
            <summary>
            No return next from media list.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISoundControlBar.onPlay">
            <summary>
            To be invoked when user triggers play.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISoundControlBar.onPause">
            <summary>
            To be invoked when user triggers pause.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISoundControlBar.onResume">
            <summary>
            To be invoked when user triggers resume.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISoundControlBar.onNext">
            <summary>
            To be invoked when finished or manually pressed.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundControlBar.SetAudioMetaData(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Contracts that the meta data from an audio file fills the content fields of this controll.
            </summary>
            <param name="audioMetaData"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundControlBar.UpdateProgress(System.TimeSpan)">
            <summary>
            Fetch progress.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISoundControlBar.IsFinished">
            <summary>
            Handles finished.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ICustomDecoration">
            <summary>
            Contracts the neccessary functions to communicate with the custom decoration.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ICustomDecoration.OnMinimize">
            <summary>
            Interfaces minimize event data.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ICustomDecoration.OnMaximize">
            <summary>
            Interfaces maximize event data.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ICustomDecoration.OnClose">
            <summary>
            Interfaces close event data.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ICustomDecoration.OnDrag">
            <summary>
            Interfaces dragging event data.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ICustomDecoration.onMinimize">
            <summary>
            To be invoked when minimize is triggered.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ICustomDecoration.onMaximize">
            <summary>
            To be invoked when maximize is triggered.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ICustomDecoration.onClose">
            <summary>
            To be invoked when close is triggered.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ICustomDecoration.onDrag">
            <summary>
            To be invoked when drag is triggered.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISongCover">
            <summary>
            Contracts the neccessary functions to communicate with SongCover.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISongCover.OnLoad">
            <summary>
            Contracts the OnLoad event interface.
            </summary>
            <param name="audioMetaData"></param>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISongCover.onLoad">
            <summary>
            Contracts availability of onLoad event for ISongCover.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISongCover.LoadCover(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Should pass an image of the audio file cover.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISongCover.LoadCover(MusicPlayerBackend.ImageContainer)">
            <summary>
            Contracts to load the cover image to the ui.
            </summary>
            <param name="imageContainer"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISettings">
            <summary>
            Contracts the neccessary functions to communicate with Settings.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISettings.OnSettingsChanged">
            <summary>
            Interfaces settings changed event data.
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.ISettings.OnLoadSettings">
            <summary>
            Interfaces to load settings.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISettings.onSettingsChanged">
            <summary>
            To be invoked when settings are changed.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.ISettings.onLoadSettings">
            <summary>
            To be invoked by content presenter.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettings.LoadSettings(MusicPlayerBackend.AppSettings)">
            <summary>
            
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.ISettings.LoadSettings">
            <summary>
            Contracts to load settings data.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IContentPresenter">
            <summary>
            Contracts the neccessary functions to communicate with ContentPresenter.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Contracts.IContentPresenter.SongCover">
            <summary>
            Holding the SongCover UI element.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Contracts.IContentPresenter.Settings">
            <summary>
            Holding the Settings UI element.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Contracts.IContentPresenter.MediaList">
            <summary>
            Holding the MediaList UI element.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IContentPresenter.ShowCoverPage">
            <summary>
            Shows the SongCover.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IContentPresenter.ShowSettingsPage">
            <summary>
            Shows the Settings.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IContentPresenter.ShowMediaListPage">
            <summary>
            Shows the MediaList.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaList">
            <summary>
            Contracts the neccessary functions to communicate with MediaList
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaList.OnSelection">
            <summary>
            Interfaces selection event data.
            </summary>
            <param name="selection"></param>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaList.OnLoadMediaList">
            <summary>
            Interfaces to load the medialist.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Contracts.IMediaList.OnLoadMediaListFromNewPath">
            <summary>
            Interfaces to fetch from a new path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IMediaList.onSelection">
            <summary>
            To be invoked upon selection and selection changes.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IMediaList.onLoadMediaList">
            <summary>
            To be invoked by content presenter.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.Contracts.IMediaList.onLoadMediaListFromNewPath">
            <summary>
            To be invoked on changed settings.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaList.AddSongToList(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Sets the media list content.
            </summary>
            <param name="song"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaList.SetPlaying(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Marks the actually playing file.
            </summary>
            <param name="selection"></param>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaList.LoadMediaList">
            <summary>
            Contracts to load the media list data.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Contracts.IMediaList.LoadMediaListFromNewMediaPath(System.String)">
            <summary>
            Contracts to fetch a new media path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:MusicPlayerBackend.ContentPresenterController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IContentPresenterController"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.ContentPresenterController.#ctor(MusicPlayerBackend.Contracts.IContentPresenter,MusicPlayerBackend.Contracts.ISongCoverController,MusicPlayerBackend.Contracts.IMediaListController,MusicPlayerBackend.Contracts.ISettingsController)">
            <summary>
            Connects <paramref name="contentPresenter"/>.
            </summary>
            <param name="contentPresenter"></param>
            <param name="mediaListController"></param>
            <param name="settingsController"></param>
            <param name="songCoverController"></param>
        </member>
        <member name="T:MusicPlayerBackend.CustomDecorationController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.ICustomDecorationController"/>
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.CustomDecorationController.#ctor(MusicPlayerBackend.Contracts.ICustomDecoration)">
            <summary>
            Connects <paramref name="customDecoration"/>.
            </summary>
            <param name="customDecoration"></param>
        </member>
        <member name="T:MusicPlayerBackend.MainController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IMainController"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.MainController.#ctor(MusicPlayerBackend.Contracts.IMainUI,MusicPlayerBackend.Contracts.IApplication,MusicPlayerBackend.Contracts.ISettingsInteractor)">
            <summary>
            Connects the <paramref name="mainUI"/> with the <paramref name="app"/>.
            </summary>
            <param name="mainUI"></param>
            <param name="app"></param>
            <param name="settingsInteractor"></param>
        </member>
        <member name="T:MusicPlayerBackend.MediaListController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IMediaListController"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.MediaListController.#ctor(MusicPlayerBackend.Contracts.IMediaList,MusicPlayerBackend.Contracts.IMediaListInteractor,MusicPlayerBackend.Contracts.ISettingsInteractor)">
            <summary>
            Connects <paramref name="mediaList"/> with <paramref name="mediaListInteractor"/>.
            </summary>
            <param name="mediaList">A reference to the media list ui.</param>
            <param name="mediaListInteractor">A reference to the media list interactor.</param>
            <param name="settingsInteractor"></param>
        </member>
        <member name="M:MusicPlayerBackend.MediaListController.SetMediaList">
            <summary>
            Sets the found media files to the ui.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.MediaListController.SetMediaListCustomMediaPath(System.String)">
            <summary>
            Loads from path media files.
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:MusicPlayerBackend.SettingsController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.ISettingsController"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SettingsController.#ctor(MusicPlayerBackend.Contracts.ISettings,MusicPlayerBackend.Contracts.ISettingsInteractor,MusicPlayerBackend.Contracts.IApplication)">
            <summary>
            Connects <paramref name="settings"/> with <paramref name="settingsInteractor"/>.
            </summary>
            <param name="settings">A reference to the settings ui.</param>
            <param name="settingsInteractor">A reference to the settings interactor.</param>
            <param name="application"></param>
        </member>
        <member name="M:MusicPlayerBackend.SettingsController.LoadSettings">
            <summary>
            Loads the settings from the file and puts it into the ui.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.SongCoverController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.ISongCoverController"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SongCoverController.#ctor(MusicPlayerBackend.Contracts.ISongCover,MusicPlayerBackend.Contracts.ISongCoverInteractor)">
            <summary>
            Connects <paramref name="songCoverInteractor"/> with <paramref name="songCover"/>.
            </summary>
            <param name="songCover">A reference to the song cover ui.</param>
            <param name="songCoverInteractor">A reference to the audio file interactor.</param>
        </member>
        <member name="M:MusicPlayerBackend.SongCoverController.SetCover(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Loads the cover image from the actual audio file.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.SoundControlBarController">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.ISoundControlBarController"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SoundControlBarController.#ctor(MusicPlayerBackend.Contracts.ISoundControlBar,MusicPlayerBackend.Contracts.IAudioFileInteractor)">
            <summary>
            Connects <paramref name="audioFileInteractor"/> with <paramref name="soundControlBar"/>.
            </summary>
            <param name="soundControlBar"></param>
            <param name="audioFileInteractor"></param>
        </member>
        <member name="M:MusicPlayerBackend.SoundControlBarController.UpdateInformation(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Updates the replay info.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.DataConverter">
            <summary>
            Implements the <see cref="T:MusicPlayerBackend.Contracts.IDataConverter"/> interface. This implementation opts for correctness of conversio.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.DataConverter.#ctor">
            <summary>
            Acquires neccessary resources for the conversions. None the moment.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.FileReader">
            <summary>
            Implements the interface <see cref="T:MusicPlayerBackend.Contracts.IFileReader"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.FileReader.#ctor">
            <summary>
            Acquires the neccessary resources to read data from files.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.FileReader.ReadAllLines(System.String)">
            <summary>
            Reads all the data from a file at <paramref name="path"/> as text.
            </summary>
            <param name="path">The file to read from.</param>
            <returns>List of <see cref="T:System.String"/> representing the files contents.</returns>
        </member>
        <member name="M:MusicPlayerBackend.FileReader.ReadWhole(System.String)">
            <summary>
            Reads all the data from a file at <paramref name="path"/> as text.
            </summary>
            <param name="path">The file to read from.</param>
            <returns>Single <see cref="T:System.String"/> representing the files contents.</returns>
        </member>
        <member name="T:MusicPlayerBackend.FileSystemHandler">
            <summary>
            Implements the interface <see cref="T:MusicPlayerBackend.Contracts.IFileSystemHandler"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.FileSystemHandler.#ctor">
            <summary>
            Acquires all neccessary resources to go through a file system.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.FileSystemHandler.onMediaFound">
            <summary>
            Gets called when <see cref="M:MusicPlayerBackend.FileSystemHandler.FindAudioFilesFromRootPathAsync(System.String,System.Collections.Generic.List{System.String})"/> is used for every found media file.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.FileSystemHandler.FindAudioFilesFromRootPath(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Finds all audio files from the given root <paramref name="rootPath"/>.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="validAudioFiles">The valid file endings.</param>
            <returns>All valid audio files in a List of paths.</returns>
        </member>
        <member name="M:MusicPlayerBackend.FileSystemHandler.FindAudioFilesFromRootPathAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Finds all audio files from the given root <paramref name="rootPath"/>.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="validAudioFiles">The valid file endings.</param>
        </member>
        <member name="T:MusicPlayerBackend.FileWriter">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IFileWriter"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.FileWriter.#ctor">
            <summary>
            Accquires neccessary resources to write data to an file;
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.FileWriter.Write(System.String,System.String)">
            <summary>
            Writes <paramref name="text"/> to an file at <paramref name="path"/>.
            </summary>
            <param name="text"></param>
            <param name="path"></param>
        </member>
        <member name="T:MusicPlayerBackend.JSONDeserializer">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IJSONDeserializer"/> to seserialize any json string for given type.
            </summary>
            /// <seealso cref="T:MusicPlayerBackend.Contracts.IJSONDeserializer" />
        </member>
        <member name="M:MusicPlayerBackend.JSONDeserializer.#ctor">
            <summary>
            Initializes neccesary resources to deserialize a json string.
            No resources are acquired within this implementation of the constructor.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.JSONDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes any given type <typeparamref name="T"/> from the <paramref name="deserializable"/> json string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializable"></param>
            <returns>Deserialized object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:MusicPlayerBackend.JSONSerializer">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IJSONSerializer"/> to serialize any object to json string for given type.
            </summary>
            <seealso cref="T:MusicPlayerBackend.Contracts.IJSONSerializer" />
        </member>
        <member name="M:MusicPlayerBackend.JSONSerializer.#ctor">
            <summary>
            Initializes neccesary resources to serialize a object.
            No resources are acquired within this implementation of the constructor.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.JSONSerializer.Serialize``1(``0)">
            <summary>
            Serializes any given object <typeparamref name="T"/> to a json string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializable"></param>
            <returns>Serialized object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:MusicPlayerBackend.MetaDataReader">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IMetaDataReader"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.MetaDataReader.#ctor">
            <summary>
            Acquires neccessary resources to read meta data of files. None at the moment.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.MetaDataReader.ReadMetaDataFromFile(System.String)">
            <summary>
            Implements the reading the meta data from file, in this case specifically media files. 
            </summary>
            <param name="path"></param>
            <returns>Returns an <see cref="T:MusicPlayerBackend.AudioMetaData"/> struct with all fileds filled if info was available.</returns>
        </member>
        <member name="M:MusicPlayerBackend.MetaDataReader.ReadImageFromAudioFile(System.String)">
            <summary>
            Reads image from audio file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MusicPlayerBackend.SoundEngine">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/> for handling of audiofiles and communication to audiodevices.
            The underlying API can be subject to change, but the output and consistensy will remain.
            Playing happens <see langword="async"/>.
            </summary>
            <inheritdoc cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/>
        </member>
        <member name="E:MusicPlayerBackend.SoundEngine.onUpdatePlayProgress">
            <summary>
            Called every second while playing an audio file. 
            Containing the latest progress, synced with the actual replay as <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.SoundEngine.onAudioFileFinished">
            <summary>
            Called when a replay is finished regulary, not paused or manually stopped.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.SoundEngine.ActualStream">
            <summary>
            Represents the actual stream handle. Only usefull for the engine itself. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.SoundEngine.ActualDevice">
            <summary>
            Represents the actual device handle. Only usefull for the engine itself.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.SoundEngine.CurrentProgress">
            <summary>
            Represents the current progress of replay in Milliseconds. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.SoundEngine.CurrentMaxPlayDuration">
            <summary>
            Represents the actual maximal replay duration for the current stream in Milliseconds.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.SoundEngine.CurrentAudioMetaData">
            <summary>
            Represents the safed MetaData of the current or last played audio file.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.SoundEngine.Devices">
            <summary>
            Contains available devices by description usually the name. 
            Can be used with the <see cref="P:MusicPlayerBackend.SoundEngine.ActualDevice"/> handle to determine the actual device name.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.#ctor">
            <summary>
            Does all the Init to properly use the <see cref="T:MusicPlayerBackend.SoundEngine"/>. No external configuration is needed.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.Finalize">
            <summary>
            Frees all acquired resources, as well as stopping all <see cref="T:MusicPlayerBackend.SoundEngine"/> related running threads.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.SetAudioDevice(System.String)">
            <summary>
            Uses <see cref="P:MusicPlayerBackend.SoundEngine.Devices"/> to init the given <paramref name="device"/>.
            It will also free any previously initialized resources. 
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.GetAudioDevices">
            <summary>
            Gets the audio devices. 
            </summary>
            <returns>List of device names that the <see cref="T:MusicPlayerBackend.SoundEngine"/> can find.</returns>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.GetCurrentAudioDevice">
            <summary>
            Gets the name of the current device.
            Determined by using <see cref="P:MusicPlayerBackend.SoundEngine.ActualDevice"/> and <see cref="P:MusicPlayerBackend.SoundEngine.Devices"/>
            </summary>
            <returns>
            The name of the current device initialized. 
            </returns>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.StartPlaying(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Starts playing the requested audio file.
            Background a new task is started with proper cancellation token.
            </summary>
            <param name="audioMetaData"></param>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.StopPlaying">
            <summary>
            Stops the task related to playing the song. The progress is not affected. 
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SoundEngine.ResumePlaying">
            <summary>
            Starts resuming the requested audio file.
            Background a new task is started with proper cancellation token.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.AudioFileInteractor">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IAudioFileInteractor"/>
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.AudioFileInteractor.onUpdatePlayProgress">
            <summary>
            Routes from the <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/>.
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.AudioFileInteractor.onAudioFileFinished">
            <summary>
            Routes from the <see cref="T:MusicPlayerBackend.Contracts.ISoundEngine"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AudioFileInteractor.#ctor(MusicPlayerBackend.Contracts.ISoundEngine,MusicPlayerBackend.Contracts.IDataConverter,MusicPlayerBackend.Contracts.IMetaDataReader)">
            <summary>
            Connects <paramref name="dataConverter"/> with <paramref name="metaDataReader"/> and with <paramref name="soundEngine"/>.
            </summary>
            <param name="soundEngine"></param>
            <param name="dataConverter"></param>
            <param name="metaDataReader"></param>
        </member>
        <member name="M:MusicPlayerBackend.AudioFileInteractor.StartPlaying(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Starts playing actual song selected.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AudioFileInteractor.StartPlayingAt(System.TimeSpan)">
            <summary>
            Starts playing the actual audio at given <paramref name="time"/>.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:MusicPlayerBackend.AudioFileInteractor.SkipTo(System.Int32)">
            <summary>
            Skips to <paramref name="seconds"/> in actual replay.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:MusicPlayerBackend.AudioFileInteractor.StopPlaying">
            <summary>
            Stops playing the actual audio.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AudioFileInteractor.ResumePlaying">
            <summary>
            Resumes playing the actual audio.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.MediaListInteractor">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IMediaListInteractor"/>
            </summary>
        </member>
        <member name="E:MusicPlayerBackend.MediaListInteractor.onMediaFound">
            <summary>
            Gets called when media file gets found in the async call.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.MediaListInteractor.#ctor(MusicPlayerBackend.Contracts.IFileSystemHandler,MusicPlayerBackend.Contracts.IMetaDataReader)">
            <summary>
            Connects <paramref name="fileSystemHandler"/> with <paramref name="metaDataReader"/>.
            </summary>
            <param name="fileSystemHandler"></param>
            <param name="metaDataReader"></param>
        </member>
        <member name="M:MusicPlayerBackend.MediaListInteractor.GetMediaListAsync(System.String)">
            <summary>
            Fetches all audio filepaths and fetches the meta data from them.
            </summary>
            <param name="rootPath"></param>
            <returns>List of <see cref="T:MusicPlayerBackend.AudioMetaData"/> of all found filepaths.</returns>
        </member>
        <member name="T:MusicPlayerBackend.SettingsInteractor">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.ISettingsInteractor"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SettingsInteractor.#ctor(MusicPlayerBackend.Contracts.IDataConverter,MusicPlayerBackend.Contracts.IJSONDeserializer,MusicPlayerBackend.Contracts.IJSONSerializer,MusicPlayerBackend.Contracts.IFileReader,MusicPlayerBackend.Contracts.IFileWriter,MusicPlayerBackend.Contracts.ISoundEngine)">
            <summary>
            Connects <paramref name="dataConverter"/>, <paramref name="fileReader"/>, <paramref name="fileWriter"/>
            <paramref name="jsonDeserializer"/> and <paramref name="jsonSerializer"/> with each other.
            </summary>
            <param name="dataConverter"></param>
            <param name="jsonDeserializer"></param>
            <param name="jsonSerializer"></param>
            <param name="fileReader"></param>
            <param name="fileWriter"></param>
            <param name="soundEngine"></param>
        </member>
        <member name="M:MusicPlayerBackend.SettingsInteractor.WriteSettings(MusicPlayerBackend.AppSettings)">
            <summary>
            Serializes and writes away the <paramref name="appSettings"/>.
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="M:MusicPlayerBackend.SettingsInteractor.ReadSettings">
            <summary>
            Reads settings and deserializes them.
            </summary>
            <returns><see cref="T:MusicPlayerBackend.AppSettings"/> read from settings file.</returns>
        </member>
        <member name="M:MusicPlayerBackend.SettingsInteractor.GetAudioDevices">
            <summary>
            Fetches the audio devices from sound engine.
            </summary>
            <returns>List of audio devices.</returns>
        </member>
        <member name="M:MusicPlayerBackend.SettingsInteractor.SetAudioDevice(System.String)">
            <summary>
            Sets the audio device.
            </summary>
            <param name="audiodevice"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MusicPlayerBackend.SongCoverInteractor">
            <summary>
            Implements <see cref="T:MusicPlayerBackend.Contracts.IAudioFileInteractor"/>
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.SongCoverInteractor.#ctor(MusicPlayerBackend.Contracts.IMetaDataReader)">
            <summary>
            Connects to <see cref="T:MusicPlayerBackend.Contracts.IMetaDataReader"/>.
            </summary>
            <param name="metaDataReader"></param>
        </member>
        <member name="M:MusicPlayerBackend.SongCoverInteractor.GetCoverFromAudio(System.String)">
            <summary>
            Reads image from meta data.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MusicPlayerBackend.Globals">
            <summary>
            Holds the global variables.
            </summary>
            <remarks>
            Usually only primitive types which are used in multiple places in code,
            but are not changed by the user or by the programm.
            </remarks>
        </member>
        <member name="P:MusicPlayerBackend.Globals.SettingsPath">
            <summary>
            Holds the path to the programms config file.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Globals.LogPath">
            <summary>
            Holds the path to the programms log file.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Globals.ValidAudioFileEndings">
            <summary>
            Stores the valid audio file endings the application is able to play and find.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.APPLICATION_STYLE">
            <summary>
            Represents the available Styles in an Typesafe manner.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.APPLICATION_STYLE.DARK">
            <summary>
            Represents the dark theme value/option.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.APPLICATION_STYLE.LIGHT">
            <summary>
            Represents the light theme value/option.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.APPLICATION_STYLE.DEFAULT">
            <summary>
            Represents the default light theme.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.APPLICATION_STYLE.DEFAULTDARK">
            <summary>
            Represents the default dark theme.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.AudioDeviceModel">
            <summary>
            Holds data for the <see cref="T:MusicPlayerBackend.Contracts.ISettings"/> UI of the Audio Devices.
            Implements <see cref="T:System.IEquatable`1"/> for equality checking. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AudioDeviceModel.Text">
            <summary>
            Name of the Audio Device
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AudioDeviceModel.Equals(MusicPlayerBackend.AudioDeviceModel)">
            <summary>
            Implements <see cref="T:System.IEquatable`1"/>. Equals by hold values.
            </summary>
            <param name="other"></param>
            <returns><see langword="true"/> if equal. <see langword="false"/> if unequal.</returns>
        </member>
        <member name="M:MusicPlayerBackend.AudioDeviceModel.GetHashCode">
            <summary>
            Summs hash codes of every field.
            </summary>
            <returns>Summed hash code as <see langword="int"/>.</returns>
        </member>
        <member name="M:MusicPlayerBackend.AudioDeviceModel.ToString">
            <summary>
            Adds every property formatted by name and value seperated by a pipe to a string.
            Uses subsequent <see cref="M:MusicPlayerBackend.AudioDeviceModel.ToString"/> calls.
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:MusicPlayerBackend.ThemesModel">
            <summary>
            Holds data for the <see cref="T:MusicPlayerBackend.Contracts.ISettings"/> UI of the available Themes.
            Implements <see cref="T:System.IEquatable`1"/> for equality checking. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.ThemesModel.Text">
            <summary>
            Represents the name of the Theme as <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.ThemesModel.Equals(MusicPlayerBackend.ThemesModel)">
            <summary>
            Implements <see cref="T:System.IEquatable`1"/>. Equals by hold values.
            </summary>
            <param name="other"></param>
            <returns><see langword="true"/> if equal. <see langword="false"/> if unequal.</returns>
        </member>
        <member name="M:MusicPlayerBackend.ThemesModel.GetHashCode">
            <summary>
            Summs hash codes of every field.
            </summary>
            <returns>Summed hash code as <see langword="int"/>.</returns>
        </member>
        <member name="M:MusicPlayerBackend.ThemesModel.ToString">
            <summary>
            Adds every property formatted by name and value seperated by a pipe to a string.
            Uses subsequent <see cref="M:MusicPlayerBackend.ThemesModel.ToString"/> calls.
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:MusicPlayerBackend.AudioDataModel">
            <summary>
            Holds data for the <see cref="T:MusicPlayerBackend.Contracts.ISoundControlBar"/> UI of the available Themes.
            Implements <see cref="T:System.IEquatable`1"/> for equality checking. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AudioDataModel.Title">
            <summary>
            Represents the title of the audio file.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AudioDataModel.Duration">
            <summary>
            Represents the duration of the audio file. 
            Has no predefined format.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AudioDataModel.Equals(MusicPlayerBackend.AudioDataModel)">
            <summary>
            Overrides the Equals Method of <see langword="object"/>.
            If is <see cref="T:MusicPlayerBackend.AudioDataModel"/>, the call is delegated to <seealso cref="M:MusicPlayerBackend.AudioDataModel.Equals(MusicPlayerBackend.AudioDataModel)"/>
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if equal.
            <see langword="false"/> if not equal.
            </returns>
        </member>
        <member name="M:MusicPlayerBackend.AudioDataModel.GetHashCode">
            <summary>
            Summs hash codes of every field.
            </summary>
            <returns>Summed hash code as <see langword="int"/>.</returns>
        </member>
        <member name="M:MusicPlayerBackend.AudioDataModel.ToString">
            <summary>
            Adds every property formatted by name and value seperated by a pipe to a string.
            Uses subsequent <see cref="M:MusicPlayerBackend.AudioDataModel.ToString"/> calls.
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:MusicPlayerBackend.ImageContainer">
            <summary>
            Holds neccessary data to hold and load an Image.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.ImageContainer.FilePath">
            <summary>
            Contains the Path to either lazy load or debug.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.ImageContainer.ImageStream">
            <summary>
            Contains an Image Byte Stream.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.ImageContainer.Equals(MusicPlayerBackend.ImageContainer)">
            <summary>
            Overrides the Equals Method of <see langword="object"/>.
            If is <see cref="T:MusicPlayerBackend.AudioMetaData"/>, the call is delegated to <seealso cref="M:MusicPlayerBackend.ImageContainer.Equals(MusicPlayerBackend.ImageContainer)"/>
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if equal.
            <see langword="false"/> if not equal.
            </returns>
        </member>
        <member name="M:MusicPlayerBackend.ImageContainer.GetHashCode">
            <summary>
            Summs hash codes of every field. Calls subsequent <see cref="M:MusicPlayerBackend.ImageContainer.GetHashCode"/> of the fields.
            </summary>
            <returns>Summed hash code as <see langword="int"/>.</returns>
        </member>
        <member name="M:MusicPlayerBackend.ImageContainer.ToString">
            <summary>
            Adds every property formatted by name and value seperated by a pipe to a string.
            Uses subsequent <see cref="M:MusicPlayerBackend.ImageContainer.ToString"/> calls.
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:MusicPlayerBackend.AudioMetaData">
            <summary>
            Holds an abstracted unified set of properties to carry the needed meta data of an audio file.
            Implements <see cref="T:System.IEquatable`1"/> for equality checking. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AudioMetaData.Title">
            <summary>
            Represents the title of the audio file, if it was available in the files meta data.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AudioMetaData.Duration">
            <summary>
            Represents the duration of the audio files content.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AudioMetaData.AudioFilePath">
            <summary>
            Represents the path the file was read from.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AudioMetaData.Equals(MusicPlayerBackend.AudioMetaData)">
            <summary>
            Overrides the Equals Method of <see langword="object"/>.
            If is <see cref="T:MusicPlayerBackend.AudioMetaData"/>, the call is delegated to <seealso cref="M:MusicPlayerBackend.AudioMetaData.Equals(MusicPlayerBackend.AudioMetaData)"/>
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if equal.
            <see langword="false"/> if not equal.
            </returns>
        </member>
        <member name="M:MusicPlayerBackend.AudioMetaData.GetHashCode">
            <summary>
            Summs hash codes of every field. Calls subsequent <see cref="M:MusicPlayerBackend.AudioMetaData.GetHashCode"/> of the fields.
            </summary>
            <returns>Summed hash code as <see langword="int"/>.</returns>
        </member>
        <member name="M:MusicPlayerBackend.AudioMetaData.ToString">
            <summary>
            Adds every property formatted by name and value seperated by a pipe to a string.
            Uses subsequent <see cref="M:MusicPlayerBackend.AudioMetaData.ToString"/> calls.
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:MusicPlayerBackend.AppSettings">
            <summary>
            Holds an abstracted unified set of properties to carry the needed meta data of an audio file.
            Implements <see cref="T:System.IEquatable`1"/> for equality checking. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AppSettings.MediaPath">
            <summary>
            Represents the path of all media files. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AppSettings.AudioDevice">
            <summary>
            Represents the audio devices name. 
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AppSettings.AudioDevices">
            <summary>
            Represents all found audio devices by their name.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.AppSettings.AppStyle">
            <summary>
            Represents the theme as enum. The choices are predefined by the enum.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.AppSettings.Equals(MusicPlayerBackend.AppSettings)">
            <summary>
            Overrides the Equals Method of <see langword="object"/>.
            If is <see cref="T:MusicPlayerBackend.AudioDataModel"/>, the call is delegated to <seealso cref="M:MusicPlayerBackend.AppSettings.Equals(MusicPlayerBackend.AppSettings)"/>
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if equal.
            <see langword="false"/> if not equal.
            </returns>
        </member>
        <member name="M:MusicPlayerBackend.AppSettings.GetHashCode">
            <summary>
            Summs hash codes of every field. Calls subsequent <see cref="M:MusicPlayerBackend.AppSettings.GetHashCode"/> of the fields.
            </summary>
            <returns>Summed hash code as <see langword="int"/>.</returns>
        </member>
        <member name="M:MusicPlayerBackend.AppSettings.ToString">
            <summary>
            Adds every property formatted by name and value seperated by a pipe to a string.
            Uses subsequent <see cref="M:MusicPlayerBackend.AppSettings.ToString"/> calls.
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:MusicPlayerBackend.LogSeverity">
            <summary>
            Capsulates the LogLvl.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.LogSeverity.Debug">
            <summary>
            Debugging level.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.LogSeverity.Informative">
            <summary>
            Information level.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.LogSeverity.Warning">
            <summary>
            Warning level.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.LogSeverity.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="F:MusicPlayerBackend.LogSeverity.Success">
            <summary>
            Success level.
            </summary>
        </member>
        <member name="T:MusicPlayerBackend.Logger">
            <summary>
            Enables controlled logging. Using Trace/Debug with custom Listeners.
            </summary>
        </member>
        <member name="P:MusicPlayerBackend.Logger.LogLevelStr">
            <summary>
            Translates the <see cref="T:MusicPlayerBackend.LogSeverity"/> into neat strings.
            </summary>
        </member>
        <member name="M:MusicPlayerBackend.Logger.Log(MusicPlayerBackend.LogSeverity,System.Object,System.String)">
            <summary>
            Logs away threaded.
            </summary>
            <param name="severity"></param>
            <param name="caller"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
    </members>
</doc>
